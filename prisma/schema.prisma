// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRES_PRISMA_URL")
  directUrl = env("POSTGRES_URL_NON_POOLING")
}

model Account {
  id                 String  @id @default(cuid())
  userId             String
  type               String
  provider           String
  providerAccountId  String
  oauth_token        String? @db.Text
  oauth_token_secret String? @db.Text
  expires_at         Int?
  token_type         String?
  scope              String?
  id_token           String? @db.Text
  session_state      String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String     @id @default(cuid())
  trelloId      String     @unique
  name          String?
  fullName      String?
  email         String?    @unique
  emailVerified DateTime?
  image         String?
  boards        String[]
  accounts      Account[]
  sessions      Session[]
  settings      Settings[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Settings {
  userId             String  @id @default(cuid())
  foodEnabled        Boolean @default(true)
  medsEnabled        Boolean @default(false)
  testsEnabled       Boolean @default(false)
  statusEnabled      Boolean @default(false)
  personalityEnabled Boolean @default(false)
  castrationEnabled  Boolean @default(false)

  user User @relation(fields: [userId], references: [id])
}

model ImageUrl {
  attachmentId String   @id
  url          String
  createdAt    DateTime
}
